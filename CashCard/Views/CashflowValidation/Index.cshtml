@using CashCard.Models
@model IEnumerable<CashCard.Models.CashFlow>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutBootstrap.cshtml";
}

<h2>Index</h2>

<p>
   
</p>
<table id="tbl" class="table table-striped table-bordered table-hover">
    <thead>
        <tr>

            <th>
                Owner
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Date)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Note)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Total)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.State)
            </th>
            <th>
                Type
            </th>


            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>

                <td>
                    @Html.DisplayFor(modelItem => item.User.UserName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Note)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Total)
                </td>
                <td>
                    @switch (item.State)
                    {
                        case StateCashFlow.Draft:
                            <span class="label label-default">Draft</span>
                            break;
                        case StateCashFlow.Final:
                        <span class="label label-primary">Final</span>
                            break;
                        case StateCashFlow.Revision:
                        <span class="label label-warning">Revision</span>
                            break;
                        case StateCashFlow.Approve:
                        <span class="label label-success">Approve</span>
                            break;
                        case StateCashFlow.Reject:
                        <span class="label label-danger">Reject</span>
                            break;
                    }

                </td>


                <td>
                    @if (item is CashOutRegular)
                    {
                        <span>Regular</span>

                    }
                    else if (item is CashIn)
                    {
                        <span>Cash In</span>

                    }
                    else
                    {
                        <span>Iregular</span>


                    }


                </td>

                <td>

                    @Html.ActionLink("Details", "Details", new { id = item.Id })

                </td>
            </tr>
        }
    </tbody>

</table>

@section Scripts {
    @Scripts.Render("~/bundle/datatable")
    <script type="text/javascript">

        var tbl = $("#tbl").DataTable(
        {
            "searching": true,
            "lengthChange": false
        });



    </script>
}


